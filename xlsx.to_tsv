#!/usr/bin/env python3
"""
xlsx42tsv  filename.xlsx  [sheet number or name]

Parse a .xlsx (Excel OOXML, which is not OpenOffice) into tab-separated values.
If it has multiple sheets, need to give a sheet number or name.
Outputs honest-to-goodness tsv, no quoting or embedded \\n\\r\\t.

One reason I wrote this is because Mac Excel 2008 export to csv or tsv messes
up encodings, converting everything to something that's not utf8 (macroman
perhaps).  This script seems to do better.

The spec for this format is 5220 pages.  I did not use it.  This was helpful:
http://blogs.msdn.com/excel/archive/2008/08/14/reading-excel-files-from-linux.aspx
But mostly I guessed how the format works.  So bugs are guaranteed.

Based on: brendan o'connor - anyall.org - gist.github.com/22764
Modified by: Karel Brinda (converted to python3, refactor and modified)
"""

#from __future__ import print_function

import xml.etree.ElementTree as ET
import argparse
import os
import sys
import zipfile
import re
import itertools

warning_count=0
warning_max=0


def letter2col_index(letter):
    """ A -> 0, B -> 1, Z -> 25, AA -> 26, BA -> 52 """
    base26digits = [1 + ord(x) - ord("A") for x in letter]
    return sum([
        x * 26**(len(base26digits) - k - 1) for k, x in enumerate(base26digits)
    ]) - 1


def n(x):
    return "{http://schemas.openxmlformats.org/spreadsheetml/2006/main}%s" % x


def flatten(iter):
    return list(itertools.chain(*iter))


def cell2text(cell, ss_list):
    if cell is None:
        return ""
    elif 't' in cell.attrib and cell.attrib['t'] == 's':
        # shared string
        idx = int(cell.find(n("v")).text)
        si = ss_list[idx]
        t_elt = si.find(n("t"))
        if t_elt is not None:
            return t_elt.text
        t_elts = si.findall(n("r") + "/" + n("t"))
        if t_elts:
            text = "".join((t.text) for t in t_elts)
            return text
        raise Exception("COULDNT DECODE CELL: %s" % ET.tostring(si))
        #return si.find(n("t")).text
        #return ET.tostring(si)
    else:
        v_elt = cell.find(n("v"))
        if v_elt is None: return ""
        return v_elt.text


def sheet_report(sheet_xs):
    print("Sheets in this file:", file=sys.stderr)
    for i, x in enumerate(sheet_xs):
        print("%3d: %s" % (i + 1, x.get('name')), file=sys.stderr)
    sys.exit(1)


def sheet_error(msg, sheet_xs):
    print(msg, file=sys.stderr)
    sheet_report(sheet_xs)


def warning(s):
    global warning_count
    warning_count += 1
    if warning_count > warning_max: return
    print("WARNING: %s" % s, file=sys.stderr)


def cell_text_clean(text):
    s = text
    if "\t" in s: warning("Clobbering embedded tab")
    if "\n" in s: warning("Clobbering embedded newline")
    if "\r" in s: warning("Clobbering embedded carriage return")
    s = s.replace("\t", " ").replace("\n", " ").replace("\r", " ")
    return s


def make_cells(max_col):
    return [None] * (max_col + 1)


def sheet_count(z):
    sheet_filenames = [
        f for f in z.namelist() if re.search("^xl/worksheets/sheet.*xml$", f)
    ]
    return len(sheet_filenames)


def print_sheet(z, sheet_num):
    sheet_filenames = [
        f for f in z.namelist() if re.search("^xl/worksheets/sheet.*xml$", f)
    ]
    workbook_x = ET.XML(z.read("xl/workbook.xml"))
    sheet_xs = workbook_x.find(n("sheets")).findall(n("sheet"))

    ss_xml = z.read("xl/sharedStrings.xml")
    ss_list = ET.XML(ss_xml).findall(n("si"))

    xml = z.read("xl/worksheets/sheet%s.xml" % sheet_num)
    s = ET.fromstring(xml)
    rows = s.findall(n("sheetData") + "/" + n("row"))

    all_cells = flatten([[c for c in row.findall(n("c"))] for row in rows])
    max_col = max(
        letter2col_index(re.search("^[A-Z]+", c.attrib['r']).group())
        for c in all_cells)

    warning_count = 0
    warning_max = 50

    rows_text = []

    for row in rows:
        cells_elts = row.findall(n("c"))
        inds = []  # parallel
        for c in cells_elts:
            letter = re.search("^[A-Z]+", c.attrib['r']).group()
            inds.append(letter2col_index(letter))
        cells = make_cells(max_col)
        for c, j in zip(cells_elts, inds):
            cells[j] = c
        #print( *(cell2text( c ).encode("utf-8").replace("\t"," ") for c in cells), sep="\t")
        cell_text = [cell_text_clean(cell2text(c, ss_list)) for c in cells]
        rows_text.append("\t".join(cell_text))

    while len(rows_text) > 0 and rows_text[-1].strip() == "":
        del rows_text[-1]

    print(*rows_text, sep="\n")

    if warning_count > warning_max:
        print(
            "%d total warnings, %d hidden" % (warning_count,
                                              warning_count - warning_max),
            file=sys.stderr)


def main():
    parser = argparse.ArgumentParser(description="")
    parser.add_argument(
        'xlsx',
        metavar='file.xlsx',
        help='Excel file',
    )

    parser.add_argument(
        'sheet',
        type=int,
        metavar='int',
        nargs='*',
        help='sheet name',
    )
    args = parser.parse_args()
    z = zipfile.ZipFile(args.xlsx)
    sheets = args.sheet
    if len(sheets) == 0:
        sheets = range(1, sheet_count(z) + 1)

    for sheet_num in sheets:
        print_sheet(z, sheet_num)


if __name__ == "__main__":
    main()
